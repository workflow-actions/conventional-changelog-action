var{walkthrough:e}=require("filewtf"),{readFileSync:t}=require("fs"),{from:i}=require("env-var"),n=require("conventional-changelog"),{setOutput:r,setFailed:o,debug:s,getInput:a}=require("@actions/core"),{omitBy:c,isUndefined:h}=require("lodash");const d=n,u=e=>new RegExp("^[^/]+/[^/]+$").test(e),p=e=>new RegExp("^refs/heads/").test(e),g=e=>new RegExp("^refs/pull/[0-9]+").test(e),f=e=>new RegExp("^refs/tags/").test(e),l=["workflow_dispatch"],y=i(process.env,{asRepoWithoutOwner:e=>{if(!u(e))throw new Error(`Repository ${e} is not valid`);const t=String(e).split("/");if(t.length<2)throw new Error('must contain at least one "/"');return t[1]},asGitHubRef:e=>{if(e){if(p(e))return e;if(g(e))return e;if(f(e))return e;throw new Error("must be a valid github ref")}throw new Error("GITHUB_REF not set")}});class w{constructor(){this.config={writerOpts:{},options:{preset:{name:"conventionalcommits",header:"# Changelog",issuePrefixes:["#"],issueUrlFormat:"{{host}}/{{owner}}/{{repository}}/issues/{{id}}",compareUrlFormat:"{{host}}/{{owner}}/{{repository}}/compare/{{previousTag}}...{{currentTag}}",userUrlFormat:"{{host}}/{{user}}",types:[{type:"feat",hidden:!1,section:"Features"},{type:"feature",hidden:!1,section:"Features"},{type:"fix",hidden:!1,section:"Bug Fixes"},{type:"bug",hidden:!1,section:"Bug Fixes"},{type:"perf",hidden:!1,section:"Performance Improvements"},{type:"revert",hidden:!1,section:"Reverts"},{type:"docs",hidden:!1,section:"Documentation"},{type:"style",hidden:!1,section:"Styles"},{type:"chore",hidden:!1,section:"Chores"},{type:"node",hidden:!1,section:"Chores"},{type:"git",hidden:!1,section:"Chores"},{type:"refactor",hidden:!1,section:"Refactor"},{type:"ref",hidden:!1,section:"Refactor"},{type:"test",hidden:!1,section:"Tests"},{type:"build",hidden:!1,section:"Automation"},{type:"ci",hidden:!1,section:"Continuous Integration"},{type:"perf",hidden:!1},{type:"",hidden:!1,section:"Refactor"}]}}},this.ci=y.get("CI").default("false").asBool(),this.workspace=y.get("GITHUB_WORKSPACE").required(this.ci).example("src").asString(),this.repo=y.get("GITHUB_REPOSITORY").required().asRepoWithoutOwner(),this.owner=y.get("GITHUB_REPOSITORY_OWNER").required().example("github").asString(),this.ref=y.get("GITHUB_REF").required(this.ci).asGitHubRef(),this.sha=y.get("GITHUB_SHA").required(this.ci).asString(),this.apiUrl=y.get("GITHUB_API_URL").default("https://api.github.com").asString(),this.serverUrl=y.get("GITHUB_SERVER_URL").default("https://github.com").asString(),this.event=y.get("GITHUB_EVENT_NAME").required(this.ci).asEnum(l),this.token=y.get("GITHUB_TOKEN").required(this.ci).default(a("token")).asString()}}(function(e,t,i,n){return new(i||(i=Promise))((function(r,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))})(void 0,void 0,void 0,(function*(){const e=new w,t=c({preset:e.config.options.preset,append:!1,releaseCount:0,skipUnstable:!1,outputUnreleased:!0,config:e.config},h);try{s(`changelog options: ${JSON.stringify(t)}`);const n=yield(i=t,new Promise(((e,t)=>{const n=d(i);let r="";n.on("data",(e=>{const t=e.toString();r+=t})).on("error",(e=>{console.log(`Error: changelog ${e}`),t(e)})).on("end",(()=>e(r)))})));console.log(n),r("config",e.config),r("changelog",n)}catch(e){o(e)}var i})).then((()=>{}));
//# sourceMappingURL=index.js.map
